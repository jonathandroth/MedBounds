% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/test_sharp_null_binary_m.R
\name{test_sharp_null_binary_m}
\alias{test_sharp_null_binary_m}
\title{Hypothesis test for the sharp null}
\usage{
test_sharp_null_binary_m(
  df,
  d,
  m,
  y,
  method = NULL,
  ordering = NULL,
  B = 500,
  cluster = NULL,
  weight.matrix = "diag",
  ats_only = F,
  alpha = 0.05,
  kappa = alpha/10,
  use_hybrid = T,
  num_Ybins = NULL,
  lambda = "dd",
  analytic_variance = FALSE,
  refinement = FALSE,
  print_both_var = FALSE
)
}
\arguments{
\item{df}{A data frame}

\item{d}{Name of the treatment variable in the df}

\item{m}{Name of the mediator variable}

\item{y}{Name of the outcome variable, which is assumed to take a discrete
support}

\item{method}{A string variable indicating which method: CS, ARP, FSST}

\item{ordering}{A list with length equal to the cardinality of the support of
the mediator variable. The name of each element corresponds to a point in
the support, and each element is a vector that collects all m values that
are less than or equal to this point. If ordering = NULL, the standard
ordering is used.}

\item{B}{Bootstrap size, default is zero}

\item{cluster}{Cluster for bootstrap}

\item{weight.matrix}{Weight matrix used to implement FSST. Possible options
 are "diag", "avar", "identity." Defaults is "diag" as in FSST.
@param num_Ybins (Optional) If specified, Y is discretized into the given number of bins (if num_Ybins is larger than the number of unique values of Y, no changes are made)
@param lambda (For FSST only) A string variable, either dd or ndd, standing for data-driven or non-data driven respectively.
@param analytic_variance (For CS or ARP only) A flag indicating whether to use analytic variance.
@param refinement (For CS only, optional) If TRUE, use the refined Cox & Shi test (rCC rather than CC). Default is FALSE.
@param print_both_var (For CS only, Optional) If TRUE, print sigma from both actual and bootstrapped data.}
}
\description{
This function tests the sharp null of Y(1,m) = Y(0,m). The
  outcome and mediator are both assumed to take finitely many different
  values. The mediator is assuemd to be binary. 
  The inference is via Cox and Shi (2023) OR Andrews, Roth, and Pakes OR FSST.
}
